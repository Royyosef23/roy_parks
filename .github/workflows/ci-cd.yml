# CI/CD Pipeline לפרויקט ParkBnB
# הקובץ הזה מריץ בדיקות אוטומטיות וdeploy כשיש push לmaster

name: ParkBnB CI/CD

# מתי להריץ את הpipeline
on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

# משתנים גלובליים
env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '14'

# Jobs - משימות שרצות במקביל
jobs:
  
  # Job 1: בדיקת Backend
  backend-test:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest
    
    # שירותים נוספים (PostgreSQL, Redis)
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: parkbnb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: 📥 Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: 🔧 Generate Prisma client
      working-directory: ./backend
      run: npx prisma generate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/parkbnb_test

    - name: 🗄️ Run database migrations
      working-directory: ./backend
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/parkbnb_test

    - name: 🧪 Run backend tests
      working-directory: ./backend
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/parkbnb_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key

    - name: 🔍 Run backend linting
      working-directory: ./backend
      run: npm run lint

    - name: 🏗️ Build backend
      working-directory: ./backend
      run: npm run build

  # Job 2: בדיקת Frontend  
  frontend-test:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📥 Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🧪 Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: 🔍 Run frontend linting
      working-directory: ./frontend
      run: npm run lint

    - name: 🏗️ Build frontend
      working-directory: ./frontend
      run: npm run build
      env:
        REACT_APP_API_URL: http://localhost:3001

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage

  # Job 3: בדיקות E2E (רק אם הbackend והfrontend עברו)
  e2e-tests:
    name: 🌐 E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: parkbnb_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 📥 Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: 🗄️ Setup test database
      working-directory: ./backend
      run: |
        npx prisma generate
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/parkbnb_e2e

    - name: 🚀 Start backend server
      working-directory: ./backend
      run: npm start &
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/parkbnb_e2e
        JWT_SECRET: test-secret-key
        PORT: 3001

    - name: 🎨 Start frontend server
      working-directory: ./frontend
      run: npm start &
      env:
        REACT_APP_API_URL: http://localhost:3001

    - name: ⏳ Wait for servers to start
      run: |
        npx wait-on http://localhost:3001/health
        npx wait-on http://localhost:3000

    - name: 🧪 Run E2E tests
      run: npx cypress run
      env:
        CYPRESS_BASE_URL: http://localhost:3000

  # Job 4: Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔒 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 5: Docker Build (רק ל-master branch)
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/master'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏗️ Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          royyosef23/parkbnb-backend:latest
          royyosef23/parkbnb-backend:${{ github.sha }}

    - name: 🏗️ Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          royyosef23/parkbnb-frontend:latest
          royyosef23/parkbnb-frontend:${{ github.sha }}

  # Job 6: Deploy (רק ל-master branch אחרי שהכל עבר)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, e2e-tests]
    if: github.ref == 'refs/heads/master'
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd /opt/parkbnb
          docker-compose down
          docker-compose pull
          docker-compose up -d
          docker system prune -f

    - name: 🏥 Health check
      run: |
        sleep 30
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1

    - name: 📢 Notify success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Job 7: Notify on failure
  notify-failure:
    name: 📢 Notify Failure
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-tests, security-scan, docker-build, deploy]
    if: failure()

    steps:
    - name: 📢 Notify failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
