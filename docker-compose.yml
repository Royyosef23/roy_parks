# Docker Compose לפיתוח מקומי
# קובץ זה מגדיר את כל השירותים שנדרשים לפיתוח

version: '3.8'

services:
  # מסד נתונים PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: parkbnb-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: parkbnb_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - parkbnb-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis לקאש ו-sessions
  redis:
    image: redis:7-alpine
    container_name: parkbnb-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - parkbnb-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: parkbnb-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/parkbnb_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-secret-key-change-in-production
      JWT_EXPIRES_IN: 7d
      FRONTEND_URL: http://localhost:3000
      # Email settings (for development)
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_USER: your-email@gmail.com
      EMAIL_PASS: your-app-password
      # Stripe settings
      STRIPE_SECRET_KEY: sk_test_your_stripe_secret_key
      STRIPE_WEBHOOK_SECRET: whsec_your_webhook_secret
      # File upload settings
      CLOUDINARY_URL: cloudinary://your_cloudinary_url
    ports:
      - "3001:3001"
    volumes:
      - ./backend/src:/app/src:ro
      - ./backend/prisma:/app/prisma:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - parkbnb-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App (במצב פיתוח)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: parkbnb-frontend-dev
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_GOOGLE_MAPS_KEY: your_google_maps_api_key
      CHOKIDAR_USEPOLLING: true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
    depends_on:
      - backend
    networks:
      - parkbnb-network

  # Nginx Reverse Proxy (אופציונלי לפיתוח)
  nginx:
    image: nginx:alpine
    container_name: parkbnb-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend-dev
    networks:
      - parkbnb-network
    profiles:
      - production

  # Adminer - ממשק גרפי למסד הנתונים
  adminer:
    image: adminer:latest
    container_name: parkbnb-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - parkbnb-network
    profiles:
      - tools

  # MailHog - לבדיקת מיילים בפיתוח
  mailhog:
    image: mailhog/mailhog:latest
    container_name: parkbnb-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - parkbnb-network
    profiles:
      - tools

# Volumes לאחסון מתמשך
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local

# רשת פרטית לכל השירותים
networks:
  parkbnb-network:
    driver: bridge
